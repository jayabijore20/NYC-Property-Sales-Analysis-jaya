# -*- coding: utf-8 -*-
"""Nyc_sales_analysis_j.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yg6_aoryBdF9NofGfIKaSOt0nBZcf6Ax

import libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import sqlite3
from matplotlib.ticker import FuncFormatter
import plotly.express as px

""" currency formatter functions"""

def currency_format(x, pos):
    if x >= 1_000_000:
        return f'${x/1_000_000:.1f}M'
    elif x >= 1_000:
        return f'${x/1_000:.0f}K'
    else:
        return f'${x:.0f}'

formatter = FuncFormatter(currency_format)

df = pd.read_csv("/content/nyc-rolling-sales.csv")

df.head()

df.isnull()

df.info()

df.describe()

# Step 4: Data Cleaning
df['SALE PRICE'] = pd.to_numeric(
    df['SALE PRICE'].replace('-', '0').astype(str).str.replace(',', ''),
    errors='coerce'
)
df = df[df['SALE PRICE'] > 0]
df['SALE DATE'] = pd.to_datetime(df['SALE DATE'], errors='coerce')
borough_map = {1: "Manhattan", 2: "Bronx", 3: "Brooklyn", 4: "Queens", 5: "Staten Island"}
df['BOROUGH'] = df['BOROUGH'].map(borough_map)

# Remove the 'Unnamed: 0' column if it exists
if 'Unnamed: 0' in df.columns:
    df.drop(columns=['Unnamed: 0'], inplace=True)

df.head()

df.info()

# Step 5: Create SQLite DB and insert table
conn = sqlite3.connect("nyc_sales.db")
df.to_sql("sales", conn, if_exists="replace", index=False)

# ---------- QUERY 1: Total sales by borough ----------
query1 = """
SELECT BOROUGH, SUM([SALE PRICE]) AS total_sales
FROM sales
GROUP BY BOROUGH
ORDER BY total_sales DESC
"""

borough_sales = pd.read_sql_query(query1, conn)
print("\nTotal Sales by Borough:\n", borough_sales)

ax = borough_sales.plot(kind='bar', x='BOROUGH', y='total_sales', legend=False)
ax.set_ylabel("Total Sales")
ax.set_title("Total Sales by Borough - NYC Rolling Sales")
ax.yaxis.set_major_formatter(formatter)
plt.tight_layout()
plt.show()

# ---------- QUERY 2: Top 10 neighborhoods by total sales ----------
query2 = """
SELECT NEIGHBORHOOD, SUM([SALE PRICE]) AS total_sales
FROM sales
GROUP BY NEIGHBORHOOD
ORDER BY total_sales DESC
LIMIT 10
"""
neighborhood_sales = pd.read_sql_query(query2, conn)
print("\nTop 10 Neighborhoods by Total Sales:\n", neighborhood_sales)

ax = neighborhood_sales.plot(kind='bar', x='NEIGHBORHOOD', y='total_sales', legend=False)
ax.set_ylabel("Total Sales")
ax.set_title("Top 10 Neighborhoods by Total Sales")
ax.yaxis.set_major_formatter(formatter)
plt.tight_layout()
plt.show()

# ---------- QUERY 3: Average sale price by building category ----------
query3 = """
SELECT [BUILDING CLASS CATEGORY] AS building_category,
       AVG([SALE PRICE]) AS avg_sale_price
FROM sales
GROUP BY [BUILDING CLASS CATEGORY]
ORDER BY avg_sale_price DESC
LIMIT 10
"""
building_avg_price = pd.read_sql_query(query3, conn)
print("\nTop 10 Building Categories by Average Sale Price:\n", building_avg_price)

ax = building_avg_price.plot(kind='bar', x='building_category', y='avg_sale_price', legend=False)
ax.set_ylabel("Average Sale Price")
ax.set_title("Top 10 Building Categories by Average Sale Price")
ax.yaxis.set_major_formatter(formatter)
plt.tight_layout()
plt.show()

# ---------- QUERY 4: Monthly sales trend (interactive) ----------
df['YearMonth'] = df['SALE DATE'].dt.to_period('M').astype(str)
df.to_sql("sales", conn, if_exists="replace", index=False)

query4 = """
SELECT YearMonth, SUM([SALE PRICE]) AS total_sales
FROM sales
GROUP BY YearMonth
ORDER BY YearMonth
"""
monthly_sales = pd.read_sql_query(query4, conn)
print("\nMonthly Sales Trend:\n", monthly_sales)

# Plotly interactive line chart
fig = px.line(monthly_sales, x="YearMonth", y="total_sales",
              title="Monthly Sales Trend - NYC Rolling Sales",
              labels={"total_sales": "Total Sales", "YearMonth": "Month"},
              markers=True)
fig.update_traces(hovertemplate='Month: %{x}<br>Total Sales: $%{y:,.0f}')
fig.update_yaxes(tickformat="$,.0f")
fig.show()

# Step 6: Close connection
conn.close()